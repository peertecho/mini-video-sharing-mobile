// This file is autogenerated by the hyperdispatch compiler
/* eslint-disable camelcase */

const { c, b4a, assert } = require('hyperdispatch/runtime')
const { version, getEncoding, setVersion } = require('./messages.js')

const defaultVersion = version

class Router {
  constructor () {
    this._handler0 = null
    this._handler1 = null
    this._handler2 = null
    this._handler3 = null
    this._handler4 = null
    this._handler5 = null
    this._handler6 = null
    this._handler7 = null
    this._handler8 = null
    this._handler9 = null
    this._handler10 = null

    this._missing = 11
  }

  add (name, handler) {
    switch (name) {
      case '@ministudio/add-writer':
        this._handler0 = handler
        break
      case '@ministudio/add-invite':
        this._handler1 = handler
        break
      case '@ministudio/del-invite':
        this._handler2 = handler
        break
      case '@ministudio/add-user':
        this._handler3 = handler
        break
      case '@ministudio/del-user':
        this._handler4 = handler
        break
      case '@ministudio/add-video':
        this._handler5 = handler
        break
      case '@ministudio/del-video':
        this._handler6 = handler
        break
      case '@ministudio/add-message':
        this._handler7 = handler
        break
      case '@ministudio/del-message':
        this._handler8 = handler
        break
      case '@ministudio/add-event':
        this._handler9 = handler
        break
      case '@ministudio/del-event':
        this._handler10 = handler
        break
      default:
        throw new Error('Cannot register a handler for a nonexistent route: ' + name)
    }
    this._missing--
  }

  _checkAll () {
    assert(this._handler0 !== null, 'Missing handler for "@ministudio/add-writer"')
    assert(this._handler1 !== null, 'Missing handler for "@ministudio/add-invite"')
    assert(this._handler2 !== null, 'Missing handler for "@ministudio/del-invite"')
    assert(this._handler3 !== null, 'Missing handler for "@ministudio/add-user"')
    assert(this._handler4 !== null, 'Missing handler for "@ministudio/del-user"')
    assert(this._handler5 !== null, 'Missing handler for "@ministudio/add-video"')
    assert(this._handler6 !== null, 'Missing handler for "@ministudio/del-video"')
    assert(this._handler7 !== null, 'Missing handler for "@ministudio/add-message"')
    assert(this._handler8 !== null, 'Missing handler for "@ministudio/del-message"')
    assert(this._handler9 !== null, 'Missing handler for "@ministudio/add-event"')
    assert(this._handler10 !== null, 'Missing handler for "@ministudio/del-event"')
  }

  async dispatch (message, context) {
    if (this._missing > 0) {
      this._checkAll()
    }

    setVersion(defaultVersion)

    const op = b4a.isBuffer(message) ? decode(message) : message

    switch (op.id) {
      case 0:
        return this._handler0(op.value, context)
      case 1:
        return this._handler1(op.value, context)
      case 2:
        return this._handler2(op.value, context)
      case 3:
        return this._handler3(op.value, context)
      case 4:
        return this._handler4(op.value, context)
      case 5:
        return this._handler5(op.value, context)
      case 6:
        return this._handler6(op.value, context)
      case 7:
        return this._handler7(op.value, context)
      case 8:
        return this._handler8(op.value, context)
      case 9:
        return this._handler9(op.value, context)
      case 10:
        return this._handler10(op.value, context)
      default:
        throw new Error('Handler not found for ID:' + op.id)
    }
  }
}

function encode (name, message, { version = defaultVersion } = {}) {
  const state = { buffer: null, start: 0, end: 0 }

  const route = getRouteByName(name)
  setVersion(version)

  c.uint.preencode(state, route.id)
  route.enc.preencode(state, message)

  state.buffer = b4a.allocUnsafe(state.end)
  c.uint.encode(state, route.id)
  route.enc.encode(state, message)

  return state.buffer
}

function decode (buffer, { version = defaultVersion } = {}) {
  const state = { buffer, start: 0, end: buffer.length }

  const id = c.uint.decode(state)
  const route = getRouteById(id)
  setVersion(version)

  const value = route.enc.decode(state)
  return { id, name: route.name, value }
}

const route0 = {
  name: '@ministudio/add-writer',
  id: 0,
  enc: getEncoding('@ministudio/writers')
}

const route1 = {
  name: '@ministudio/add-invite',
  id: 1,
  enc: getEncoding('@ministudio/invites')
}

const route2 = {
  name: '@ministudio/del-invite',
  id: 2,
  enc: getEncoding('@ministudio/invites')
}

const route3 = {
  name: '@ministudio/add-user',
  id: 3,
  enc: getEncoding('@ministudio/users')
}

const route4 = {
  name: '@ministudio/del-user',
  id: 4,
  enc: getEncoding('@ministudio/users')
}

const route5 = {
  name: '@ministudio/add-video',
  id: 5,
  enc: getEncoding('@ministudio/videos')
}

const route6 = {
  name: '@ministudio/del-video',
  id: 6,
  enc: getEncoding('@ministudio/videos')
}

const route7 = {
  name: '@ministudio/add-message',
  id: 7,
  enc: getEncoding('@ministudio/messages')
}

const route8 = {
  name: '@ministudio/del-message',
  id: 8,
  enc: getEncoding('@ministudio/messages')
}

const route9 = {
  name: '@ministudio/add-event',
  id: 9,
  enc: getEncoding('@ministudio/events')
}

const route10 = {
  name: '@ministudio/del-event',
  id: 10,
  enc: getEncoding('@ministudio/events')
}

function getRouteByName (name) {
  switch (name) {
    case '@ministudio/add-writer':
      return route0
    case '@ministudio/add-invite':
      return route1
    case '@ministudio/del-invite':
      return route2
    case '@ministudio/add-user':
      return route3
    case '@ministudio/del-user':
      return route4
    case '@ministudio/add-video':
      return route5
    case '@ministudio/del-video':
      return route6
    case '@ministudio/add-message':
      return route7
    case '@ministudio/del-message':
      return route8
    case '@ministudio/add-event':
      return route9
    case '@ministudio/del-event':
      return route10
    default:
      throw new Error('Handler not found for name: ' + name)
  }
}

function getRouteById (id) {
  switch (id) {
    case 0:
      return route0
    case 1:
      return route1
    case 2:
      return route2
    case 3:
      return route3
    case 4:
      return route4
    case 5:
      return route5
    case 6:
      return route6
    case 7:
      return route7
    case 8:
      return route8
    case 9:
      return route9
    case 10:
      return route10
    default:
      throw new Error('Handler not found for ID: ' + id)
  }
}

module.exports = {
  version,
  encode,
  decode,
  Router
}
